#!/usr/bin/env php
<?php

require __DIR__ .'/vendor/autoload.php';
require __DIR__ .'/config/database.php';

use Illuminate\Database\Capsule\Manager as Capsule;
use Cartalyst\Sentinel\Native\Facades\Sentinel;

class Migrator {
	
    /**
     * migrate the database schema
     */
    public function migrate() {
        /**
         * create User table
         */
        if (!Capsule::schema()->hasTable('User')) {
            Capsule::schema()->create('User', function($table)
            {

                $table->integer('id', true);
                $table->string('full_name')->nullable();
                $table->string('email');
                $table->string('password');
                $table->timestamp('created_date')->nullable();
                $table->string('last_latitude')->nullable();
                $table->string('last_longitude')->nullable();
                $table->string('token')->nullable();
                $table->timestamps();          

                // We'll need to ensure that MySQL uses the InnoDB engine to
                // support the indexes, other engines aren't affected.
                $table->engine = 'InnoDB';

                //Foreign keys
                $table->unique('email');
            });
        }

        /**
         * create Order table
         */
        if (!Capsule::schema()->hasTable('Order')) {
            Capsule::schema()->create('Order', function($table)
            {
                $table->integer('id', true);
                $table->integer('user_id');
                $table->integer('total_price')->default(0);
                $table->timestamp('order_date');
                $table->timestamps();

                // We'll need to ensure that MySQL uses the InnoDB engine to
                // support the indexes, other engines aren't affected.
                $table->engine = 'InnoDB';

                //Foreign keys
                $table->foreign('user_id')->references('id')->on('User');

            });
        }
		
		/**
         * create brand table
         */
        if (!Capsule::schema()->hasTable('Brand')) {
            Capsule::schema()->create('Brand', function($table)
            {
                $table->integer('id', true);
                $table->string('legend');
                $table->timestamps();

                // We'll need to ensure that MySQL uses the InnoDB engine to
                // support the indexes, other engines aren't affected.
                $table->engine = 'InnoDB';
            });
        }

        /**
         * create city table
         */
        if (!Capsule::schema()->hasTable('City')) {
            Capsule::schema()->create('City', function($table)
            {
                $table->integer('id', true);
                $table->string('name');
                $table->timestamps();

                // We'll need to ensure that MySQL uses the InnoDB engine to
                // support the indexes, other engines aren't affected.
                $table->engine = 'InnoDB';
            });
        }
        
        /**
         * create shop table
         */
        if (!Capsule::schema()->hasTable('Shop')) {
            Capsule::schema()->create('Shop', function($table)
            {
                $table->integer('id', true);
                $table->integer('city_id');
                $table->string('shop_name');
                $table->string('formatted_address');
                $table->string('latitude');
                $table->string('longitude');
                $table->timestamps();

                // We'll need to ensure that MySQL uses the InnoDB engine to
                // support the indexes, other engines aren't affected.
                $table->engine = 'InnoDB';

                //Foreign keys
                $table->foreign('city_id')->references('id')->on('City');
                
            });
        }
        
        /**
         * create shoes table
         */
        if (!Capsule::schema()->hasTable('Shoes')) {
            Capsule::schema()->create('Shoes', function($table)
            {
                $table->integer('id', true);
                $table->integer('brand_id');
                $table->integer('shop_id');
                $table->string('image');
                $table->integer('size');
                $table->integer('price_per_day');
                $table->text('description');
                $table->boolean('is_reserved');
                $table->timestamps();

                // We'll need to ensure that MySQL uses the InnoDB engine to
                // support the indexes, other engines aren't affected.
                $table->engine = 'InnoDB';

                //Foreign keys
                $table->foreign('brand_id')->references('id')->on('Brand');
                $table->foreign('shop_id')->references('id')->on('Shop');


            });
        }

        /**
         * create order_line table
         */
        if (!Capsule::schema()->hasTable('OrderLine')) {
            Capsule::schema()->create('OrderLine', function($table)
            {
                $table->integer('id', true);
                $table->integer('shoes_id');
                $table->integer('order_id');
                $table->timestamp('start_date')->default(Capsule::raw('CURRENT_TIMESTAMP'));
                $table->timestamp('end_date')->default(Capsule::raw('CURRENT_TIMESTAMP'));
                $table->timestamps();

                // We'll need to ensure that MySQL uses the InnoDB engine to
                // support the indexes, other engines aren't affected.
                $table->engine = 'InnoDB';

                //Foreign keys
                $table->foreign('shoes_id')->references('id')->on('Shoes');
                $table->foreign('order_id')->references('id')->on('Order');
            });
        }
    }

    /**
     * seed the database with initial value
     */
    public function seed() {
        try {
           $credentials = [
				// 'email'    => 'admin@admin.com',
				// 'password' => 'password',
				// 'first_name' => 'Yudi',
				// 'last_name' => 'Purwanto',
			];

			$user = Sentinel::registerAndActivate($credentials);
			
        } catch(Exception $e) {
            echo $e->getMessage()."\n";
        }
    }
}

$migrator = new Migrator();

$migrator->migrate();
// $migrator->seed();

print("Migration Successfully");